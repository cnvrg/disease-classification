# Copyright (c) 2023 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# SPDX-License-Identifier: MIT

---
title: S3 Disease Classification # Required 
version: 1.0.0 # Required
long_description: "" # Optional

# Optional properties for crediting authors
author: "cnvrg"
author_email: "libhub@cnvrg.io"

# At least one tag [inference, training, data] must be present
tags:
  - training


# List of tasks (libraries)
tasks:
  - title: S3 Data Connector
    top: 400
    left: 100

    # Type must be according to the flow task conventions (data, exec, deploy)
    type: exec

    # The library data
    library: s3-connector
    library_version: 1.0.0

    # The flattened library parameters (in this case we have training library)
    command: python s3-connector.py

    requirements:
      cpu: 3.5
      memory: 7.5
      gpu: 0
      hpu: 0
 


    image: cnvrg:v5.0
    language: python3

    # The "arguments" property changes to "params", rest remains the same.
    # Params in the blueprint yaml can be used to override the arguments in the library.
    params:
      - key: endpoint
        type: 'categorical'
        values:
          - 'http://s3.amazonaws.com download'
      - key: bucketname
        type: 'categorical'
        values: ['libhub-readme']
      - key: localdir
        type: 'categorical'
        values:
          - '/cnvrg'
      - key: prefix
        type: 'categorical'
        values: 
          - None
        
  - title: Disease Classification
    top: 400
    left: 300

    # Type must be according to the flow task conventions (data, exec, deploy)
    type: exec

    # The library data
    library: disease-classification-training
    library_version: 1.0.0

    # The flattened library parameters (in this case we have training library)
    command: python train.py

    requirements:
      cpu: 2
      memory: 2
      gpu: 1
      hpu: 0


    image: python:3.8
    language: python3

    # The "arguments" property changes to "params", rest remains the same.
    # Params in the blueprint yaml can be used to override the arguments in the library.
    params:
      - key: train_path
        type: 'categorical'
        values:
          - None
      - key: test_path
        type: 'categorical'
        values: 
          - None
      


  - title: Disease Classification Inference
    top: 300
    left: 500

    # Type must be according to the flow task conventions (data, exec, deploy)
    type: deploy

    # The library data
    library: disease-classification-inference
    library_version: 1.0.0

    # The flattened library parameters (in this case we have inference library)
    kind: webservice

    requirements:
      cpu: 3.5
      memory: 7.5
      gpu: 0
      hpu: 0



    image: python:3.8
    language: python3
    
    accept_files: false
    gunicorn_config:
      - key: workers
        value: '1'
    file_name: predict.py # the entrypoint file name
    function_name: predict # the entrypoint function
    prep_file: '' # preprocess file name
    prep_function: '' # preprocess function
    input_example:
      vars: ''
    input_schema:
      img: file
    output_schema: {}



relations:

  - from: S3 Data Connector
    to: Disease Classifciation Training
  - from: Disease Classifciation Training
    to: Disease Classifciation Training